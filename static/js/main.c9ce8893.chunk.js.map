{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","Link","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggleMode","role","htmlFor","text","TextForm","setText","useState","fontStyle","setFontStyle","fonts","Fragment","style","color","heading","value","onChange","event","console","log","target","fontFamily","backgroundColor","rows","disabled","length","buttonColor","handliClik","newText","toUpperCase","showalert","handliClik1","toLowerCase","cleartext","changeFont","prevStyle","nextIndex","indexOf","handlecopy","navigator","clipboard","writeText","RemoveSpace","split","join","filter","element","replace","defaultProps","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","About","mystyle","data-bs-parent","App","setMode","settext","setalert","message","setTimeout","Router","cls","document","body","Routes","Route","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c9ce8893.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        {/* 17th vedio */}\r\n        <Link className=\"navbar-brand\" to=\"/Home\">\r\n          {props.title}\r\n        </Link>\r\n          {/* <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a> */}\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link \" aria-current=\"page\" to=\"/Home\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n           \r\n           {/* <div className=\"d-flex\">\r\n                 <div className=\"bg-primary rounded mx-2\" onClick={()=>{props.toggleMode('primary')}} style={{height : '30px', width: '30px', cursor:'pointer'}}> </div>\r\n                 <div className=\"bg-danger rounded mx-2\" onClick={()=>{props.toggleMode('primary')}} style={{height : '30px', width: '30px', cursor:'pointer'}}> </div>\r\n                 <div className=\"bg-success rounded mx-2\" onClick={()=>{props.toggleMode('primary')}} style={{height : '30px', width: '30px', cursor:'pointer'}}> </div>\r\n                 <div className=\"bg-warning rounded mx-2\" onClick={()=>{props.toggleMode('primary')}} style={{height : '30px', width: '30px', cursor:'pointer'}}> </div>\r\n           </div> */}\r\n          \r\n          {/* Theme Circles */}\r\n          {/* <div className=\"d-flex align-items-center\">\r\n            <button\r\n              className=\"rounded-circle mx-1 border border-dark\"\r\n              // style={{ width: \"30px\", height: \"30px\", backgroundColor: \"red\" }}\r\n              // onClick={() => props.changeTheme(\"red\")}\r\n            ></button>\r\n            <button\r\n              className=\"rounded-circle mx-1 border border-dark\"\r\n              // style={{ width: \"30px\", height: \"30px\", backgroundColor: \"blue\" }}\r\n              // onClick={() => props.changeTheme(\"blue\")}\r\n            ></button>\r\n            <button\r\n              className=\"rounded-circle mx-1 border border-dark\"\r\n              // style={{ width: \"30px\", height: \"30px\", backgroundColor: \"green\" }}\r\n              // onClick={() => props.changeTheme(\"green\")}\r\n            ></button>\r\n            <button\r\n              className=\"rounded-circle mx-1 border border-dark\"\r\n              // style={{ width: \"30px\", height: \"30px\", backgroundColor: \"yellow\" }}\r\n              // onClick={() => props.changeTheme(\"yellow\")}\r\n            ></button>\r\n          </div> */}\r\n\r\n          {/* Dark Mode Toggle */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            } mx-3`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n               onClick={props.toggleMode}\r\n              //onClick={ () => {props.toggleMode(null)}}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n              {props.text}\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// PropTypes Validation\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string,\r\n  toggleMode: PropTypes.func.isRequired,\r\n  changeTheme: PropTypes.func.isRequired, // Ensure function is required\r\n};\r\n\r\n// Default Props\r\nNavbar.defaultProps = {\r\n  title: \"Home\",\r\n  aboutText: \"About Us\",\r\n};\r\n","// Importing the necessary React library and the useState hook for state management\r\nimport React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n \r\n  // State to manage the text input\r\n  const [text, setText] = useState(\"\"); // Initial state value set to 'Enter text here'\r\n  // Initial state value\r\n  const [fontStyle, setFontStyle] = useState(\"Arial\"); // State for font style\r\n\r\n  // text = \"new text\"; // This is the wrong way to change state; it directly modifies the state\r\n  // setText(\"new text\"); // This is the correct way to update the state using the setter function\r\n\r\n  // Function to handle the \"Convert to UpperCase\" button click event\r\n  const handliClik = () => {\r\n    console.log(\"UpperCase was clicked...!!!!!!11\" + text); // Logs a message and the current text\r\n    let newText = text.toUpperCase(); // Converts the text to uppercase\r\n    setText(newText); // Updates the state with the new uppercase text\r\n    props.showalert(\"Converted to UpperCase\", \"success\");\r\n    \r\n  };\r\n  const handliClik1 = () => {\r\n    console.log(\"LowerCase was clicked...!!!!!!11\" + text); // Logs a message and the current text\r\n    let newText = text.toLowerCase(); // Converts the text to uppercase\r\n    setText(newText); // Updates the state with the new uppercase text\r\n    props.showalert(\"Converted to LowerCase\", \"success\");\r\n  };\r\n  //------clear text\r\n  const cleartext = () => {\r\n    console.log(\"Succesfully clear all text...!!!!!!11\" + text); // Logs a message and the current text\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showalert(\"Text Cleared\", \"success\");\r\n  };\r\n  //-----font chanege\r\n  // const changeFont = () => {\r\n  //   console.log(\"Successfully changed font...!!!!!!11\" + text);\r\n  //   setFontStyle((prevStyle) =>\r\n  //     prevStyle === \"Arial\" ? \"Courier New\" : \"Arial\"\r\n  //   );\r\n  //   props.showalert(\"Converted to OtherFont\", \"success\");\r\n  // };\r\n  const fonts = [\r\n    \"Arial\", \r\n    \"Courier New\", \r\n    \"Times New Roman\", \r\n    \"Verdana\", \r\n    \"Georgia\",\r\n    \"Cursive\", \r\n    \"Fantasy\", \r\n    \"Monospace\",\r\n    \"Brush Script MT\", \r\n    \"Comic Sans MS\",\r\n    \"Lobster\",\r\n    \"Pacifico\",\r\n    \"Dancing Script\",\r\n    \"'Billisight', sans-serif\"  // Yeh custom font hai agar available ho\r\n];\r\n\r\n\r\nconst changeFont = () => {\r\n    console.log(\"Successfully changed font...!!!!!! \" + text);\r\n\r\n    setFontStyle((prevStyle) => {\r\n        let currentIndex = fonts.indexOf(prevStyle);\r\n        let nextIndex = (currentIndex + 1) % fonts.length; // Circular switching\r\n        return fonts[nextIndex];\r\n    });\r\n\r\n    props.showalert(\"Converted to Other Font\", \"success\");\r\n};\r\n\r\n//-----copy Text\r\n  const handlecopy = () => {\r\n    console.log(\"Successfully Copy Text...!!!!!!11\" + text);\r\n    // var text = document.getElementById(\"myBox\");\r\n    // text.select();\r\n  //  navigator.clipboard.writeText(text.value);\r\n  //  document.getSelection().removeAllRanges();\r\n  navigator.clipboard.writeText(text);\r\n    props.showalert(\"Copied to Clipboard\", \"success\");\r\n  };\r\n\r\n  //--------remove extra Space\r\n  const RemoveSpace= () =>{\r\n    console.log(\"Successfully remove space...!!!!!!11\" + text);\r\n    //------use Rejex Logic \r\n    let newText = text.split(/[ ]+/).join(\" \");\r\n    setText(newText);\r\n    props.showalert(\"Remove Extra Space\", \"success\");\r\n  }\r\n  // Function to handle the onChange event of the textarea (allows typing in the textarea)\r\n  const handleonchage = (event) => {\r\n    // Added 'event' as a parameter to use it correctly\r\n    console.log(\"On change !!!!!!11\"); // Logs a message when text is changed\r\n    setText(event.target.value); // Updates the state with the current value of the textarea\r\n  };\r\n\r\n  return (\r\n    <>                \r\n      <div className=\"container\" style={{color:props.mode==='light' ?'#042743':'white'}}>\r\n        {/* Displaying the heading passed as a prop */}\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          {/* Textarea for user input; its value is controlled by the state */}\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleonchage}\r\n            style={{fontFamily: fontStyle ,backgroundColor:props.mode==='light' ?'white':'#042743' ,color:props.mode==='light' ?'black':'white'}}\r\n            id=\"mybox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        {/* Button to trigger conversion of text to uppercase */}\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1  my-1\" style={{ backgroundColor : props.buttonColor}}  onClick={handliClik}>\r\n          Convert to UpperCase\r\n        </button>\r\n        <button disabled={text.length===0}className=\"btn btn-primary mx-1 my-1\" style={{ backgroundColor: props.mode === 'dark' || 'light' ? 'primary' : props.buttonColor}} onClick={handliClik1}>\r\n          Convert to LowerCase\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={cleartext}>\r\n          Clear Text\r\n        </button>\r\n        <button disabled={text.length===0}className=\"btn btn-primary mx-1 my-1\" onClick={changeFont}>\r\n          Font Change\r\n        </button>\r\n        <button disabled={text.length===0}className=\"btn btn-primary mx-1 my-1\" onClick={handlecopy}>\r\n          Copy Text\r\n        </button>\r\n        <button disabled={text.length===0}className=\"btn btn-primary mx-1 my-1\" onClick={RemoveSpace}>\r\n         Remove Extra Space\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color:props.mode==='light' ?'black':'white'}}>\r\n        <h3 style={{color:props.mode==='light' ?'black':'white'}}>Your Text Summary</h3>\r\n        {/* text.split(\" \").length ka matlab hota hai string ko space ke basis par todna aur total parts ya words ka count nikalna. */}\r\n        <p style={{color:props.mode==='light' ?'black':'white'}}>\r\n          {text.split(/\\s+/).filter((element) => {return element.length!==0}).length} words and {text.replace(/\\s/g, \"\").length} Characters\r\n        </p>\r\n        <p style={{color:props.mode==='light' ?'black':'white'}}>{0.008 * text.split(\" \").filter((element) => {return element.length!==0}).length} Minutes read</p>\r\n        <h4  style={{color:props.mode==='light' ?'black':'white'}} >Priview </h4>\r\n        <p style={{color:props.mode==='light' ?'black':'white',  fontFamily: fontStyle}} >{text.length>0?text:\"Nothing to preview .!!\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  //for success conevrt into Success first letter upaercase\r\n  const capitalize = (word) => {\r\n    if (!word) return \"\";\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n\r\n  return (\r\n    <div style={{height: '50px'}}>\r\n       { props.alert && \r\n          //alert-warning === alert-${props.alert.type} show type mean in green box\r\n          <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n          </div>}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Alert;\r\n","import React from 'react';\r\n\r\nfunction About(props) {\r\n  let mystyle = {\r\n    color: props.mode === 'dark' ? 'white' : '#042743',\r\n    backgroundColor: props.mode === 'dark' ? 'rgb(36, 74, 104)' : 'white',\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n        <h1 className=\"my-3\">About Page</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\" style={mystyle}>\r\n          \r\n          {/* Accordion Item 1 */}\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\">\r\n              <button className=\"accordion-button\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                <strong>Analyze your text</strong>\r\n              </button>\r\n            </h2>\r\n            <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" style={mystyle} data-bs-parent=\"#accordionExample\">\r\n              <div className=\"accordion-body\">\r\n                TextUtils gives you a way to analyze your text quickly and efficiently. Be it word count, character count, or more.\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Accordion Item 2 */}\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\">\r\n              <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                <strong>Free to use</strong>\r\n              </button>\r\n            </h2>\r\n            <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" style={mystyle} data-bs-parent=\"#accordionExample\">\r\n              <div className=\"accordion-body\">\r\n                TextUtils is a free character counter tool that provides instant character and word count statistics. It is useful for writing text with word/character limits.\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Accordion Item 3 */}\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\">\r\n              <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                <strong>Browser Compatible</strong>\r\n              </button>\r\n            </h2>\r\n            <div id=\"collapseThree\" className=\"accordion-collapse collapse\" style={mystyle} data-bs-parent=\"#accordionExample\">\r\n              <div className=\"accordion-body\">\r\n                This word counter software works in any web browser such as Google Chrome, Mozilla Firefox, Opera, Safari, Internet Explorer, and Microsoft Edge.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n        </div>\r\n\r\n        {/* Agar extra closing div error kar raha tha, usko hata diya */}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React, { useState} from \"react\";\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport './App.css';\nimport Alert from \"./components/Alert\";\nimport About from \"./components/About\";\n\n// React-Router-package\nimport {\n  BrowserRouter as Router,\n  Routes, // Replace Switch with Routes\n  Route,  // Keep Route as it is\n} from \"react-router-dom\";\n\nfunction App() {\n  // state for light/dark mode\n  const [mode, setMode] = useState('light'); \n  // state for test change in mode\n  const [text, settext] = useState('Enable Dark Mode');\n  // state for alert message\n  const [alert, setalert] = useState(null);\n\n  // state for various theme\n  // // const [theme, setThemeColor] = useState('primary');\n  // const [ setThemeColor] = useState('primary');\n  // // New state for button color\n  // const [buttonColor, setButtonColor] = useState('primary');\n  \n  // Function to change theme color\n  // const changeTheme = (color) => {\n  //   setThemeColor(color);\n  //   if (mode === \"light\" || mode === \"dark\") {\n  //     document.body.style.backgroundColor = color;\n  //     setButtonColor(color); // Change button color with theme\n  //   }\n  //   showalert(`Theme changed to ${color}`, \"success\");\n  // };\n\n  // Show alert message function\n  const showalert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    });\n    // Set timeout to remove alert after 3 seconds\n    setTimeout(() => {\n      setalert(null);\n    }, 3000);\n  };\n\n  // Toggle mode function\n  const toggleMode = (cls) => {\n    // removeBodyClasses();\n    // console.log(cls)\n    //document.body.classList.add('bg-'+cls)\n    if (mode === 'light') {\n      setMode('dark');\n      settext('Enable Dark Mode');\n      showalert(\"Dark mode has been enabled\", \"success\");\n      document.body.style.backgroundColor = '#042743';\n      document.title = 'TextUtils - Dark Mode';\n    } else {\n      setMode('light');\n      settext('Enable Light Mode');\n      showalert(\"Light mode has been enabled\", \"success\");\n      document.body.style.backgroundColor = 'white';\n      document.title = 'TextUtils - Light Mode';\n    }\n  };\n  //-for body color remove  \n  // const removeBodyClasses= ()=>{\n  //   document.body.classList.remove('bg-primary');\n  //   document.body.classList.remove('bg-secondary');\n  //   document.body.classList.remove('bg-success');\n  //   document.body.classList.remove('bg-danger');\n  //   document.body.classList.remove('bg-warning');\n  //   document.body.classList.remove('bg-info');\n  //   document.body.classList.remove('bg-dark');\n  //   document.body.classList.remove('bg-light');\n    \n  // }\n\n  return (\n    <>\n    {/* this is for routing example but this cooment on 17th vedio bcz its create problem when deploy on github page */}\n      <Router>\n        <Navbar title=\"TextUtil's\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} text={text} />\n        <Alert alert={alert} />\n        \n        <div className=\"container my-3\">\n          <Routes> \n            <Route exact path=\"/about\" element={<About mode={mode}/>} /> {/* Use element instead of children */}\n            <Route exact path=\"/Home\" element={<TextForm showalert={showalert} heading=\"Enter the text to analyze below\" mode={mode}  />} />\n            </Routes>\n        </div>\n      </Router>\n      \n        {/* <Navbar title=\"TextUtil's\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} text={text} changeTheme={changeTheme} /> */}\n        {/* <Navbar title=\"TextUtil's\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} text={text} />\n        <Alert alert={alert} />\n        \n        <div className=\"container my-3\">\n            {/* <About /> */}\n            {/* <TextForm showalert={showalert} heading=\"Enter the text to analyze below\" mode={mode} buttonColor={buttonColor} />  */}\n            {/* <TextForm showalert={showalert} heading=\"Enter the text to analyze below\" mode={mode}  />  */}\n        {/* </div> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}