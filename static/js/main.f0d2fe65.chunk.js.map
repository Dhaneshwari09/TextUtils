{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","text","TextForm","setText","useState","fontStyle","setFontStyle","Fragment","style","color","heading","value","onChange","event","console","log","target","fontFamily","backgroundColor","rows","buttonColor","handliClik","newText","toUpperCase","showalert","handliClik1","toLowerCase","cleartext","changeFont","prevStyle","handlecopy","navigator","clipboard","writeText","RemoveSpace","split","join","length","defaultProps","aboutText","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","settext","setalert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f0d2fe65.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        {/* 17th vedio */}\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link> */}\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/About\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li> */}\r\n          </ul>\r\n\r\n          {/* Theme Circles */}\r\n          {/* <div className=\"d-flex align-items-center\">\r\n            <button\r\n              className=\"rounded-circle mx-1 border border-dark\"\r\n              // style={{ width: \"30px\", height: \"30px\", backgroundColor: \"red\" }}\r\n              // onClick={() => props.changeTheme(\"red\")}\r\n            ></button>\r\n            <button\r\n              className=\"rounded-circle mx-1 border border-dark\"\r\n              // style={{ width: \"30px\", height: \"30px\", backgroundColor: \"blue\" }}\r\n              // onClick={() => props.changeTheme(\"blue\")}\r\n            ></button>\r\n            <button\r\n              className=\"rounded-circle mx-1 border border-dark\"\r\n              // style={{ width: \"30px\", height: \"30px\", backgroundColor: \"green\" }}\r\n              // onClick={() => props.changeTheme(\"green\")}\r\n            ></button>\r\n            <button\r\n              className=\"rounded-circle mx-1 border border-dark\"\r\n              // style={{ width: \"30px\", height: \"30px\", backgroundColor: \"yellow\" }}\r\n              // onClick={() => props.changeTheme(\"yellow\")}\r\n            ></button>\r\n          </div> */}\r\n\r\n          {/* Dark Mode Toggle */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            } mx-3`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n              {props.text}\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// PropTypes Validation\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string,\r\n  toggleMode: PropTypes.func.isRequired,\r\n  changeTheme: PropTypes.func.isRequired, // Ensure function is required\r\n};\r\n\r\n// Default Props\r\nNavbar.defaultProps = {\r\n  title: \"Home\",\r\n  aboutText: \"About Us\",\r\n};\r\n","// Importing the necessary React library and the useState hook for state management\r\nimport React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  // State to manage the text input\r\n  const [text, setText] = useState(\"Enter text here..\"); // Initial state value set to 'Enter text here'\r\n  // Initial state value\r\n  const [fontStyle, setFontStyle] = useState(\"Arial\"); // State for font style\r\n\r\n  // text = \"new text\"; // This is the wrong way to change state; it directly modifies the state\r\n  // setText(\"new text\"); // This is the correct way to update the state using the setter function\r\n\r\n  // Function to handle the \"Convert to UpperCase\" button click event\r\n  const handliClik = () => {\r\n    console.log(\"UpperCase was clicked...!!!!!!11\" + text); // Logs a message and the current text\r\n    let newText = text.toUpperCase(); // Converts the text to uppercase\r\n    setText(newText); // Updates the state with the new uppercase text\r\n    props.showalert(\"Converted to UpperCase\", \"success\");\r\n    \r\n  };\r\n  const handliClik1 = () => {\r\n    console.log(\"LowerCase was clicked...!!!!!!11\" + text); // Logs a message and the current text\r\n    let newText = text.toLowerCase(); // Converts the text to uppercase\r\n    setText(newText); // Updates the state with the new uppercase text\r\n    props.showalert(\"Converted to LowerCase\", \"success\");\r\n  };\r\n  //------clear text\r\n  const cleartext = () => {\r\n    console.log(\"Succesfully clear all text...!!!!!!11\" + text); // Logs a message and the current text\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showalert(\"Text Cleared\", \"success\");\r\n  };\r\n  //-----font chanege\r\n  const changeFont = () => {\r\n    console.log(\"Successfully changed font...!!!!!!11\" + text);\r\n    setFontStyle((prevStyle) =>\r\n      prevStyle === \"Arial\" ? \"Courier New\" : \"Arial\"\r\n    );\r\n    props.showalert(\"Converted to OtherFont\", \"success\");\r\n  };\r\n//-----copy Text\r\n  const handlecopy = () => {\r\n    console.log(\"Successfully Copy Text...!!!!!!11\" + text);\r\n    navigator.clipboard.writeText(text);\r\n    props.showalert(\"Copied to Clipboard\", \"success\");\r\n  };\r\n\r\n  //--------remove extra Space\r\n  const RemoveSpace= () =>{\r\n    console.log(\"Successfully remove space...!!!!!!11\" + text);\r\n    //------use Rejex Logic \r\n    let newText = text.split(/[ ]+/).join(\" \");\r\n    setText(newText);\r\n    props.showalert(\"Remove Extra Space\", \"success\");\r\n  }\r\n  // Function to handle the onChange event of the textarea (allows typing in the textarea)\r\n  const handleonchage = (event) => {\r\n    // Added 'event' as a parameter to use it correctly\r\n    console.log(\"On change !!!!!!11\"); // Logs a message when text is changed\r\n    setText(event.target.value); // Updates the state with the current value of the textarea\r\n  };\r\n\r\n  return (\r\n    <>                \r\n      <div className=\"container\" style={{color:props.mode==='light' ?'#042743':'white'}}>\r\n        {/* Displaying the heading passed as a prop */}\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          {/* Textarea for user input; its value is controlled by the state */}\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleonchage}\r\n            style={{fontFamily: fontStyle ,backgroundColor:props.mode==='light' ?'white':'#042743' ,color:props.mode==='light' ?'black':'white'}}\r\n            id=\"mybox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        {/* Button to trigger conversion of text to uppercase */}\r\n        <button className=\"btn btn-primary mx-1\" style={{ backgroundColor : props.buttonColor}}  onClick={handliClik}>\r\n          Convert to UpperCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" style={{ backgroundColor: props.mode === 'dark' || 'light' ? 'primary' : props.buttonColor}} onClick={handliClik1}>\r\n          Convert to LowerCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={cleartext}>\r\n          Clear Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={changeFont}>\r\n          Font Change\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handlecopy}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={RemoveSpace}>\r\n         Remove Extra Space\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color:props.mode==='light' ?'black':'white'}}>\r\n        <h3 style={{color:props.mode==='light' ?'black':'white'}}>Your Text Summary</h3>\r\n        {/* text.split(\" \").length ka matlab hota hai string ko space ke basis par todna aur total parts ya words ka count nikalna. */}\r\n        <p style={{color:props.mode==='light' ?'black':'white'}}>\r\n          {text.split(\" \").length} words and {text.length} charators\r\n        </p>\r\n        <p style={{color:props.mode==='light' ?'black':'white'}}>{0.008 * text.length} Minutes read</p>\r\n        <h4  style={{color:props.mode==='light' ?'black':'white'}}>Priview </h4>\r\n        <p style={{color:props.mode==='light' ?'black':'white'}}>{text.length>0?text:\"Enter something in the textbox above to preview it here..!!\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  //for success conevrt into Success first letter upaercase\r\n  const capitalize = (word) => {\r\n    if (!word) return \"\";\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n\r\n  return (\r\n    props.alert && (\r\n      //alert-warning === alert-${props.alert.type} show type mean in green box\r\n      <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React, { useState} from \"react\";\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport './App.css';\nimport Alert from \"./components/Alert\";\n//import About from \"./components/About\";\n\n// React-Router-package\n// import {\n//   BrowserRouter as Router,\n//   Routes, // Replace Switch with Routes\n//   Route,  // Keep Route as it is\n// } from \"react-router-dom\";\n\nfunction App() {\n  // state for light/dark mode\n  const [mode, setMode] = useState('light'); \n  // state for test change in mode\n  const [text, settext] = useState('Enable Dark Mode');\n  // state for alert message\n  const [alert, setalert] = useState(null);\n\n  // state for various theme\n  // // const [theme, setThemeColor] = useState('primary');\n  // const [ setThemeColor] = useState('primary');\n  // // New state for button color\n  // const [buttonColor, setButtonColor] = useState('primary');\n  \n  // Function to change theme color\n  // const changeTheme = (color) => {\n  //   setThemeColor(color);\n  //   if (mode === \"light\" || mode === \"dark\") {\n  //     document.body.style.backgroundColor = color;\n  //     setButtonColor(color); // Change button color with theme\n  //   }\n  //   showalert(`Theme changed to ${color}`, \"success\");\n  // };\n\n  // Show alert message function\n  const showalert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    });\n    // Set timeout to remove alert after 3 seconds\n    setTimeout(() => {\n      setalert(null);\n    }, 3000);\n  };\n\n  // Toggle mode function\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      settext('Enable Dark Mode');\n      showalert(\"Dark mode has been enabled\", \"success\");\n      document.body.style.backgroundColor = '#042743';\n      document.title = 'TextUtils - Dark Mode';\n    } else {\n      setMode('light');\n      settext('Enable Light Mode');\n      showalert(\"Light mode has been enabled\", \"success\");\n      document.body.style.backgroundColor = 'white';\n      document.title = 'TextUtils - Light Mode';\n    }\n  };\n\n  return (\n    <>\n    {/* this is for routing example but this cooment on 17th vedio bcz its create problem when deploy on github page */}\n      {/* <Router>\n        <Navbar title=\"TextUtil's\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} text={text} changeTheme={changeTheme} />\n        <Alert alert={alert} />\n        \n        <div className=\"container my-3\">\n          <Routes> Use Routes instead of Switch\n            <Route exact path=\"/about\" element={<About />} /> {/* Use element instead of children */}\n            {/* <Route exact path=\"/Home\" element={<TextForm showalert={showalert} heading=\"Enter the text to analyze below\" mode={mode} buttonColor={buttonColor} />} />\n            </Routes>\n        </div>\n      </Router> */} \n     \n        {/* <Navbar title=\"TextUtil's\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} text={text} changeTheme={changeTheme} /> */}\n        <Navbar title=\"TextUtil's\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} text={text} />\n        <Alert alert={alert} />\n        \n        <div className=\"container my-3\">\n            {/* <About /> */}\n            {/* <TextForm showalert={showalert} heading=\"Enter the text to analyze below\" mode={mode} buttonColor={buttonColor} />  */}\n            <TextForm showalert={showalert} heading=\"Enter the text to analyze below\" mode={mode}  /> \n        </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}